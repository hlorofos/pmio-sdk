{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "ProcessMaker API",
    "description": "The ProcessMaker.io API is a developer friendly Workflow and BPM Engine API. The engine provides full native support for BPMN 2.0. The current Alpha 1.0 version supports BPMN 2.0 xml file import, process execution, task assignment, and much more.",
    "termsOfService": "http://processmaker.com/terms/",
    "contact": {
      "name": "ProcessMaker Core API Team",
      "email": "alpha-program@processmaker.com",
      "url": "https://alpha-program.processmaker.com/"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost",
  "basePath": "/api/v1",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/vnd.api+json"
  ],
  "produces": [
    "application/vnd.api+json"
  ],
  "security": [
    {
      "PasswordGrant": []
    },
    {
      "internalApiKey": []
    }
  ],
  "paths": {
    "/users/{user_id}/clients": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving all existing clients of user.",
        "operationId": "findClients",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User relative to clients",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Clients list is ready to use",
            "schema": {
              "title": "ClientCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Client"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new Client for User",
        "operationId": "addClient",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User relative to client",
            "required": true,
            "type": "string"
          },
          {
            "name": "ClientCreateItem",
            "in": "body",
            "description": "JsonApi with the Client object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Client"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has been fulfilled and Client being created",
            "schema": {
              "type": "object",
              "title": "ClientItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Client"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/{user_id}/clients/{client_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving a client based on ID.",
        "operationId": "findClientById",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of Client to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Client Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Client"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing client.",
        "operationId": "updateClient",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of User to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of Client to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "ClientUpdateItem",
            "in": "body",
            "description": "Client object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Client"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Client object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Client"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the Client and User IDs.",
        "operationId": "deleteClient",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of of User item",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/inputoutput": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving all existing InputOutput objects for the related task instance.",
        "operationId": "findInputOutputs",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task instance ID related to InputOutput object",
            "required": true,

            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "InputOutputs list is ready to use",
            "schema": {
              "title": "InputOutputCollection",
              "description": "JSON API Response with array of items collection",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InputOutput"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new InputOutput",
        "operationId": "addInputOutput",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task instance ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "InputOutputCreateItem",
            "in": "body",
            "description": "Create and add a new InputOutput object with JSON API",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/InputOutput"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has been fulfilled and InputOutput object being created",
            "schema": {
              "type": "object",
              "title": "InputOutputItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/InputOutput"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving an InputOutput object based on ID.",
        "operationId": "findInputOutputById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task instance ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputoutput_uid",
            "in": "path",
            "description": "ID of InputOutput to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "InputOutput Item response was completed",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/InputOutput"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing InputOutput.",
        "operationId": "updateInputOutput",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task instance ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputoutput_uid",
            "in": "path",
            "description": "ID of InputOutput to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "InputOutputUpdateItem",
            "in": "body",
            "description": "InputOutput object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/InputOutput"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The InputOutput object was updated successfully via JSON API response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/InputOutput"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the InputOutput ID, Process ID and Task ID",
        "operationId": "deleteInputOutput",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "Task instance ID related to InputOutput object",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputoutput_uid",
            "in": "path",
            "description": "ID of InputOutput to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/import": {
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for importing BPMN files. This import covers next BPMN 2.0 elements for modeling processes: Sequence Flows, Start event, End event, Message Start event, Message Intermediate event, Timer Boundary Interrupting Event, Timer Boundary Non-Interrupting Event, Script task, User task, Service task Exclusive Gateways, Inclusive Gateways, Parallel Gateways. A new process is created when import passed successful.",
        "operationId": "importBpmnFile",
        "parameters": [
          {
            "name": "bpmnImportItem",
            "in": "body",
            "description": "JsonApi with the BPMN file to import",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/BpmnFile"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Process instance was created successfully",
            "schema": {
              "type": "object",
              "title": "ProcessCollection",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Process"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/MetaLog"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden access",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/instances/{instance_id}/datamodel": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method returns the instance DataModel and lets work with it directly",
        "operationId": "findDataModel",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of Instance to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "DataModel Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/DataModelItem"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/task_instances/{task_instance_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving TaskInstance based on itâ€™s ID.",
        "operationId": "findTaskInstanceById",
        "parameters": [
          {
            "name": "task_instance_id",
            "in": "path",
            "description": "ID of TaskInstance to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskInstance Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/TaskInstance"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing TaskInstance.",
        "operationId": "updateTaskInstance",
        "parameters": [
          {
            "name": "task_instance_id",
            "in": "path",
            "description": "ID of TaskInstance to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskInstanceUpdateItem",
            "in": "body",
            "description": "TaskInstance object to update",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/TaskInstance"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated TaskInstance object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/TaskInstance"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/task_instances": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving and finding tasks instances  related to the task",
        "operationId": "findTaskInstances",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "TaskInstances list",
            "schema": {
              "title": "TaskInstanceCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskInstance"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/instances": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving all Instances related to the Process via Process ID",
        "operationId": "findInstances",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID relative to instance",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has been fulfilled and Instances list is ready to use",
            "schema": {
              "title": "InstanceCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Instance"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new instance.",
        "operationId": "addInstance",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "Process ID relative to instance",
            "required": true,
            "type": "string"
          },
          {
            "name": "InstanceCreateItem",
            "in": "body",
            "description": "JsonApi with the Instance object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Instance"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Instance response was created succesfully",
            "schema": {
              "type": "object",
              "title": "InstanceItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Instance"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Not found item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/instances/{instance_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving an instance based on itâ€™s ID.",
        "operationId": "findInstanceById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of Instance to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Instance Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Instance"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing Instance.",
        "operationId": "updateInstance",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of Instance to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "InstanceUpdateItem",
            "in": "body",
            "description": "Instance object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Instance"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Instance object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Instance"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the instance ID and Process ID.",
        "operationId": "deleteInstance",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of of Process item",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Instance was successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/flows": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving all existing flows.",
        "operationId": "findFlows",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to flow",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Flows list is ready to use",
            "schema": {
              "title": "FlowCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Flow"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new Sequence flow",
        "operationId": "addFlow",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to flow",
            "required": true,
            "type": "string"
          },
          {
            "name": "FlowCreateItem",
            "in": "body",
            "description": "JsonApi with the Flow object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Flow"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The request has been fulfilled and Sequence Flow being created",
            "schema": {
              "type": "object",
              "title": "FlowItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Flow"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Not found item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/flows/{flow_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving a flow based on itâ€™s ID.",
        "operationId": "findFlowById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "ID of Flow to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Flow Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Flow"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing flow.",
        "operationId": "updateFlow",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "ID of Flow to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "FlowUpdateItem",
            "in": "body",
            "description": "Flow object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Flow"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Flow object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Flow"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the flow_id and Process ID.",
        "operationId": "deleteFlow",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of of Process item",
            "required": true,
            "type": "string"
          },
          {
            "name": "flow_id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/gateways": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intending for retrieving all existing gateways.",
        "operationId": "findGateways",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to gateway",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateways list",
            "schema": {
              "title": "GatewayCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Gateway"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new gateway.",
        "operationId": "addGateway",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to gateway",
            "required": true,
            "type": "string"
          },
          {
            "name": "GatewayCreateItem",
            "in": "body",
            "description": "JsonApi with the Gateway object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Gateway response",
            "schema": {
              "type": "object",
              "title": "GatewayItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Not found item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/gateways/{gateway_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving a gateway based on itâ€™s ID.",
        "operationId": "findGatewayById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "gateway_id",
            "in": "path",
            "description": "ID of Gateway to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing gateway.",
        "operationId": "updateGateway",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "gateway_id",
            "in": "path",
            "description": "ID of Gateway to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "GatewayUpdateItem",
            "in": "body",
            "description": "Gateway object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Gateway object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Gateway"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the gateway_id and Process ID.",
        "operationId": "deleteGateway",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of of Process item",
            "required": true,
            "type": "string"
          },
          {
            "name": "gateway_id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method returns all events related to the runned process",
        "operationId": "findEvents",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to event",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Events list",
            "schema": {
              "title": "EventCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Event"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new event.",
        "operationId": "addEvent",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to task",
            "required": true,
            "type": "string"
          },
          {
            "name": "EventCreateItem",
            "in": "body",
            "description": "JsonApi with the Event object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Event response",
            "schema": {
              "type": "object",
              "title": "EventItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Not found item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving an event based on itâ€™s ID.",
        "operationId": "findEventById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Event to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Event Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method lets update the existing Process Event with new  data",
        "operationId": "updateEvent",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Event to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "EventUpdateItem",
            "in": "body",
            "description": "Event object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Event object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Event"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on event_id and Process ID.",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of of Process item",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}/trigger": {
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating an event.",
        "operationId": "EventTrigger",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to event",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Event to trigger",
            "required": true,
            "type": "string"
          },
          {
            "name": "TriggerEventCreateItem",
            "in": "body",
            "description": "Json with some parameters",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/DataModel"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Trigger Event and response with DataModel item",
            "schema": {
              "type": "object",
              "title": "DataModelItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/DataModelItem"
                }
              }
            }
          },
          "404": {
            "description": "Not found item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}/connectors": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method returns all events connectors related to the runned process and event",
        "operationId": "findEventConnectors",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Event connectors list",
            "schema": {
              "title": "EventConnectorsCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EventConnector"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new event connector.",
        "operationId": "addEventConnector",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "EventConnectorCreateItem",
            "in": "body",
            "description": "JsonApi with the EventConnector object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/EventConnector"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Event connector response",
            "schema": {
              "type": "object",
              "title": "EventConnectorItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/EventConnector"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Not found item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/events/{event_id}/connectors/{connector_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for retrieving an event connector based on it's ID.",
        "operationId": "findEventConnectorById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Event to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "ID of EventConnector to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Event Connector Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/EventConnector"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method lets update the existing Process Event Connector with new  data",
        "operationId": "updateEventConnector",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of Event to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "ID of Event Connector to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "EventConnectorUpdateItem",
            "in": "body",
            "description": "EventConnector object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/EventConnector"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated EventConnector object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/EventConnector"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on event_id and Process ID.",
        "operationId": "deleteEventConnector",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of of Process item",
            "required": true,
            "type": "string"
          },
          {
            "name": "event_id",
            "in": "path",
            "description": "ID of item to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "connector_id",
            "in": "path",
            "description": "ID of Event Connector to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for returning a list of all Tasks related to the process",
        "operationId": "findTasks",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to task",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks list",
            "schema": {
              "title": "TaskCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Task"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new task.",
        "operationId": "addTask",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process relative to task",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskCreateItem",
            "in": "body",
            "description": "JsonApi with the Task object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Task"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created Task response",
            "schema": {
              "type": "object",
              "title": "TaskItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Not item",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving a task based on itâ€™s ID.",
        "operationId": "findTaskById",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of Task to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Task Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing task.",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of Task to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskUpdateItem",
            "in": "body",
            "description": "Task object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Task"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Task object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Task"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on task_id and Process ID.",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of of Process item",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{process_id}/tasks/{task_id}/groups": {
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for assignment group(s) to the choosen task",
        "operationId": "addGroupsToTask",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of Task to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskAddGroupsItem",
            "in": "body",
            "description": "JsonApi with Groups ids to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/GroupIds"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group(s) was assigned to the task",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Group(s) not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "422": {
            "description": "Un-processable entity",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Unkwown error is appera due adding Group(s) to the task",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for removing groups from a task",
        "operationId": "removeGroupsFromTask",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of Task",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskRemoveGroupsItem",
            "in": "body",
            "description": "JsonApi with Groups ids to remove",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/GroupIds"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with result details",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Group(s) not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "422": {
            "description": "Un-processable entity",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Error removing Group(s)",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for synchronizing a one or more groups with a task.",
        "operationId": "syncGroupsToTask",
        "parameters": [
          {
            "name": "process_id",
            "in": "path",
            "description": "ID of Process",
            "required": true,
            "type": "string"
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "ID of Task to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "TaskSyncGroupsItem",
            "in": "body",
            "description": "JsonApi with Groups ids to sync",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/GroupIds"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with result details",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Group(s) not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Error sync Group(s)",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving all existing processes.",
        "operationId": "findProcesses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Processes list",
            "schema": {
              "title": "ProcessCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Process"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "403": {
            "description": "Forbidden access",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for creating a new process",
        "operationId": "addProcess",
        "parameters": [
          {
            "name": "ProcessCreateItem",
            "in": "body",
            "description": "JsonApi with the Process object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Process"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New process was created",
            "schema": {
              "type": "object",
              "title": "ProcessItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Process"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/processes/{id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "Returns the process based on a single ID",
        "operationId": "findProcessById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Process Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Process"
                }
              }
            }
          },
          "404": {
            "description": "Process not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing process.",
        "operationId": "updateProcess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Process to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProcessUpdateItem",
            "in": "body",
            "description": "Process object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Process"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Process object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Process"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the itemâ€™s ID. ",
        "operationId": "deleteProcess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "401": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving all existing groups.",
        "operationId": "findGroups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Groups list",
            "schema": {
              "title": "GroupCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new group.",
        "operationId": "addGroup",
        "parameters": [
          {
            "name": "GroupCreateItem",
            "in": "body",
            "description": "JsonApi with the Group object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Group"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Group response",
            "schema": {
              "type": "object",
              "title": "GroupItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Group"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for retrieving a group based on a single ID.",
        "operationId": "findGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Group to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Group Item response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Group"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating an existing group.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Group to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "GroupUpdateItem",
            "in": "body",
            "description": "Group object to edit",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Group"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated Group object",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/Group"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for deleting a single item based on the itemâ€™s ID.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Item successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Deletion error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/groups/{id}/users": {
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for adding one, or more new users to a group.",
        "operationId": "addUsersToGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Group to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "GroupAddUsersItem",
            "in": "body",
            "description": "JsonApi with Users ids to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/UserIds"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with result details",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "422": {
            "description": "Un-processable entity",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Error adding Group(s)",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for removing one or more users from a group.",
        "operationId": "removeUsersFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Group to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "GroupRemoveUsersItem",
            "in": "body",
            "description": "JsonApi with Users ids to remove",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/UserIds"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with result details",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "422": {
            "description": "Un-processable entity",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "Error adding Group(s)",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for synchronizing one or more users with a group.",
        "operationId": "syncUsersToGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Group to modify",
            "required": true,
            "type": "string"
          },
          {
            "name": "GroupSyncUsersItem",
            "in": "body",
            "description": "JsonApi with Users ids to sync",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/UserIds"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with result details",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "500": {
            "description": "Error adding Group(s)",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/myself": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method returns User information based on Token",
        "operationId": "myselfUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for returning all existing users in the system.",
        "operationId": "findUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Nr to fetch",
            "required": false,
            "default": 1,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Amount of Items per Page",
            "required": false,
            "default": 15,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Users list",
            "schema": {
              "title": "UserCollection",
              "description": "Json Api Response with collection of Items in array",
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "meta": {
                  "$ref": "#/definitions/Meta"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "post": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for creating a new user in the system.",
        "operationId": "addUser",
        "parameters": [
          {
            "name": "UserCreateItem",
            "in": "body",
            "description": "JsonApi with the User object to add",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New User was created",
            "schema": {
              "type": "object",
              "title": "UserItem",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is responsible for returning a user based on their ID.",
        "operationId": "findUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of User to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "put": {
        "tags": [
          "processmaker"
        ],
        "description": "This method is intended for updating parameters an existing user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of User to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "UserUpdateItem",
            "in": "body",
            "description": "User object for update",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JsonApi response with updated User object",
            "schema": {
              "title": "UserUpdatedItem",
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "processmaker"
        ],
        "description": "This method deletes User from the system.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User was successfully deleted",
            "schema": {
              "$ref": "#/definitions/ResultSuccess"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "500": {
            "description": "The server encountered an unexpected condition due delete response",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/errorArray"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "PasswordGrant": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "/oauth/access_token"
    },
    "internalApiKey": {
      "type": "apiKey",
      "in": "query",
      "name": "access_token"
    }
  },
  "definitions": {
    "EventConnector": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "event_connector",
          "type": "string",
          "example": "event_connector"
        },
        "attributes": {
          "required": [
            "event_id",
            "connector_class"
          ],
          "type": "object",
          "properties": {
            "event_id": {
              "type": "integer"
            },
            "connector_class": {
              "type": "string"
            },
            "input_parameters": {
              "type": "object"
            },
            "output_parameters": {
              "type": "object"
            },
            "async_before": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "Client": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "example": "1"
        },
        "type": {
          "default": "client",
          "type": "string",
          "example": "client"
        },
        "attributes": {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "secret": {
              "type": "string",
              "example": "1WfPZS8TepSKgnure5FHUOyvT8340fQH8cz4ISN2"
            },
            "name": {
              "type": "string",
              "example": "Client Name"
            },
            "personal_access_client": {
              "type": "boolean"
            },
            "password_client": {
              "type": "boolean"
            },
            "revoked": {
              "type": "boolean"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "InputOutput": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "input_output",
          "type": "string",
          "example": "input_output"
        },
        "attributes": {
          "required": [
            "input_parameters",
            "output_parameters"
          ],
          "type": "object",
          "properties": {
            "input_parameters": {
              "type": "object"
            },
            "output_parameters": {
              "type": "object"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "BpmnFile": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "default": "process",
          "type": "string",
          "example": "process"
        },
        "attributes": {
          "required": [
            "bpmn"
           ],
          "type": "object",
          "properties": {
            "bpmn": {
              "type": "string"
              }
            }
        }
      }
    },
    "TaskInstance": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "task_instance",
          "type": "string",
          "example": "task_instance"
        },
        "attributes": {
          "required": [
            "task_id",
            "instance_id",
            "status",
            "priority"
          ],
          "type": "object",
          "properties": {
            "task_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "instance_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "group_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "user_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "status": {
              "type": "string",
              "default": "INITIAL",
              "enum": [
                "INITIAL",
                "DELEGATED",
                "STARTED",
                "CANCELLED",
                "FINISHED",
                "COMPLETE",
                "PAUSED"
              ]
            },
            "priority": {
              "type": "string",
              "default": "3",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ]
            },
            "delegate_date": {
              "$ref": "#/definitions/dateTime"
            },
            "start_date": {
              "$ref": "#/definitions/dateTime"
            },
            "finish_date": {
              "$ref": "#/definitions/dateTime"
            },
            "task_due_date": {
              "$ref": "#/definitions/dateTime"
            },
            "risk_date": {
              "$ref": "#/definitions/dateTime"
            },
            "duration": {
              "type": "integer"
            },
            "instance_overdue_percentage": {
              "type": "number",
              "format": "double"
            },
            "data": {
              "type": "string"
            },
            "content": {
              "type": "string"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "DataModelItem": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "data_model",
          "type": "string",
          "example": "data_model"
        },
        "attributes": {
          "required": [
            "content"
          ],
          "type": "object",
          "properties": {
            "content": {
              "type": "object"
            }
          }
        }
      }
    },
    "DataModel": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "default": "data_model",
          "type": "string",
          "example": "data_model"
        },
        "attributes": {
          "required": [
            "content"
          ],
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "example": "Some parameters in json format"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Instance": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "instance",
          "type": "string",
          "example": "instance"
        },
        "attributes": {
          "required": [
            "name",
            "process_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Instance Name"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "process_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "parent_instance_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b12"
            },
            "init_user_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b14"
            },
            "pin": {
              "type": "string"
            },
            "duration": {
              "type": "integer"
            },
            "status": {
              "type": "string",
              "default": "RUNNING",
              "enum": [
                "RUNNING",
                "TODO",
                "PAUSED",
                "COMPLETED",
                "CANCELLED"
              ]
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Flow": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "flow",
          "type": "string",
          "example": "flow"
        },
        "attributes": {
          "required": [
            "process_id",
            "from_object_id",
            "from_object_type",
            "to_object_id",
            "to_object_type",
            "type",
            "default",
            "optional"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Flow name"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "process_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "from_object_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b25"
            },
            "from_object_type": {
              "type": "string",
              "example": "task"
            },
            "to_object_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b25"
            },
            "to_object_type": {
              "type": "string",
              "example": "event"
            },
            "type": {
              "type": "string",
              "default": "SEQUENTIAL",
              "enum": [
                "SEQUENTIAL",
                "EVALUATE",
                "SELECT",
                "PARALLEL",
                "PARALLEL-BY-EVALUATION",
                "SEC-JOIN",
                "DISCRIMINATOR"
              ]
            },
            "condition": {
              "type": "string"
            },
            "default": {
              "type": "boolean",
              "default": false
            },
            "optional": {
              "type": "boolean",
              "default": false
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Gateway": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "gateway",
          "type": "string",
          "example": "gateway"
        },
        "attributes": {
          "required": [
            "type",
            "process_id"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Gateway Title"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "process_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "type": {
              "type": "string",
              "enum": [
                "EXCLUSIVE",
                "INCLUSIVE",
                "PARALLEL",
                "EVENT"
              ]
            },
            "direction": {
              "type": "string",
              "enum": [
                "DIVERGENT",
                "CONVERGENT",
                "MIXED"
              ]
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Event": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "event",
          "type": "string",
          "example": "event"
        },
        "attributes": {
          "required": [
            "name",
            "process_id",
            "type",
            "definition"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Event_Title"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "process_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "message_id": {
              "type": "integer"
            },
            "type": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "INTERMEDIATE_CATCH",
                "INTERMEDIATE_THROW",
                "BOUNDARY",
                "IMPLICIT_THROW"
              ]
            },
            "definition": {
              "type": "string",
              "enum": [
                "NONE",
                "CANCEL",
                "COMPENSATION",
                "ERROR",
                "ESCALATION",
                "MESSAGE",
                "LINK",
                "SIGNAL",
                "TERMINATE",
                "TIMER"
              ]
            },
            "interrupting": {
              "type": "boolean"
            },
            "condition": {
              "type": "string"
            },
            "time": {
              "type": "string"
            },
            "duration": {
              "type": "string"
            },
            "cycle": {
              "type": "string"
            },
            "attached_to_task_id": {
              "type": "integer"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Task": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "task",
          "type": "string",
          "example": "task"
        },
        "attributes": {
          "required": [
            "type",
            "process_id",
            "assign_type",
            "transfer_fly",
            "can_upload",
            "view_upload",
            "view_additional_documentation",
            "start",
            "send_last_email",
            "selfservice_timeout",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Task_Title"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "process_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "type": {
              "default": "NORMAL",
              "type": "string",
              "enum": [
                "NORMAL",
                "ADHOC",
                "SUBPROCESS",
                "HIDDEN",
                "GATEWAYTOGATEWAY",
                "WEBENTRYEVENT",
                "END-MESSAGE-EVENT",
                "START-MESSAGE-EVENT",
                "INTERMEDIATE-THROW-MESSAGE-EVENT",
                "INTERMEDIATE-CATCH-MESSAGE-EVENT",
                "SCRIPT-TASK",
                "USER-TASK",
                "START-TIMER-EVENT",
                "INTERMEDIATE-CATCH-TIMER-EVENT",
                "END-EMAIL-EVENT",
                "INTERMEDIATE-THROW-EMAIL-EVENT"
              ]
            },
            "assign_type": {
              "default": "CYCLIC",
              "type": "string",
              "enum": [
                "CYCLIC",
                "MANUAL",
                "EVALUATE",
                "REPORT_TO",
                "SELF_SERVICE",
                "STATIC_MI",
                "CANCEL_MI",
                "MULTIPLE_INSTANCE",
                "MULTIPLE_INSTANCE_VALUE_BASED"
              ]
            },
            "priority_variable": {
              "type": "string"
            },
            "assign_variable": {
              "type": "string"
            },
            "group_variable": {
              "type": "string"
            },
            "mi_instance_variable": {
              "type": "string"
            },
            "mi_complete_variable": {
              "type": "string"
            },
            "transfer_fly": {
              "default": false,
              "type": "boolean"
            },
            "can_upload": {
              "default": false,
              "type": "boolean"
            },
            "view_upload": {
              "default": false,
              "type": "boolean"
            },
            "view_additional_documentation": {
              "default": false,
              "type": "boolean"
            },
            "start": {
              "default": false,
              "type": "boolean"
            },
            "send_last_email": {
              "default": true,
              "type": "boolean"
            },
            "derivation_screen_tpl": {
              "type": "string"
            },
            "selfservice_timeout": {
              "type": "integer",
              "default": 0
            },
            "selfservice_time": {
              "type": "string"
            },
            "selfservice_time_unit": {
              "type": "string"
            },
            "selfservice_execution": {
              "type": "string"
            },
            "last_assigned_user_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "script": {
              "type": "string"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Process": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "process",
          "type": "string",
          "example": "process"
        },
        "attributes": {
          "required": [
            "status",
            "duration_by",
            "type",
            "design_access",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Process_Title"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "parent_process_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b11"
            },
            "status": {
              "default": "ACTIVE",
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "DISABLED"
              ]
            },
            "duration_by": {
              "default": "WORKING_DAYS",
              "type": "string",
              "enum": [
                "WORKING_DAYS",
                "CALENDAR_DAYS"
              ]
            },
            "type": {
              "default": "NORMAL",
              "type": "string",
              "enum": [
                "NORMAL",
                "SUB_PROCESS"
              ]
            },
            "assignment": {
              "default": false,
              "type": "boolean"
            },
            "design_access": {
              "default": "PUBLIC",
              "type": "string",
              "enum": [
                "PUBLIC",
                "PRIVATE"
              ]
            },
            "show_map": {
              "default": true,
              "type": "boolean"
            },
            "show_message": {
              "default": true,
              "type": "boolean"
            },
            "show_delegate": {
              "default": true,
              "type": "boolean"
            },
            "show_dynaform": {
              "default": false,
              "type": "boolean"
            },
            "category_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b22"
            },
            "sub_category_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b33"
            },
            "create_user_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b44"
            },
            "debug": {
              "type": "boolean",
              "default": false
            },
            "dynaform_summary_id": {
              "type": "string",
              "example": "9d705617-cc29-482a-85ff-7f7292f72b55"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "Group": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "group",
          "type": "string",
          "example": "group"
        },
        "attributes": {
          "required": [
            "code",
            "title"
          ],
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "example": "GROUP_ADMIN"
            },
            "title": {
              "type": "string",
              "example": "Group_Title"
            },
            "description": {
              "type": "string",
              "example": "Some description"
            },
            "status": {
              "default": "ACTIVE",
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE"
              ],
              "example": "ACTIVE"
            },
            "users": {
              "type": "array",
              "description": "User Ids array",
              "items": {
                "type": "string",
                "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
              }
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            }
          }
        }
      }
    },
    "UserIds": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "description": "User Ids array",
          "items": {
            "type": "string",
            "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
          }
        }
      }
    },
    "GroupIds": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "description": "Group Ids array",
          "items": {
            "type": "string",
            "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
          }
        }
      }
    },
    "ResultSuccess": {
      "type": "object",
      "required": [
        "meta"
      ],
      "properties": {
        "meta": {
          "type": "object",
          "required": [
            "code"
          ],
          "properties": {
            "code": {
              "type": "string",
              "example": "1234",
              "description": "Result code from ApiCodes dictionary"
            },
            "title": {
              "type": "string",
              "example": "Some positive result description",
              "description": "Result textual explanation"
            }
          }
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "9d705617-cc29-482a-85ff-7f7292f72b31"
        },
        "type": {
          "default": "user",
          "type": "string",
          "example": "user"
        },
        "attributes": {
          "required": [
            "username",
            "password",
            "email",
            "firstname",
            "lastname"
          ],
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "example": "user_name"
            },
            "password": {
              "type": "string",
              "example": "some_password"
            },
            "firstname": {
              "type": "string",
              "example": "First_name"
            },
            "lastname": {
              "type": "string",
              "example": "Last_name"
            },
            "email": {
              "type": "string",
              "example": "example@example.com"
            },
            "expire_date": {
              "$ref": "#/definitions/dateTime"
            },
            "status": {
              "default": "ACTIVE",
              "type": "string",
              "enum": [
                "ACTIVE",
                "INACTIVE",
                "VACATION",
                "CLOSED"
              ],
              "example": "ACTIVE"
            },
            "country": {
              "type": "string",
              "example": "USA"
            },
            "city": {
              "type": "string",
              "example": "Washington"
            },
            "location": {
              "type": "string",
              "example": "Location"
            },
            "address": {
              "type": "string",
              "example": "USA"
            },
            "phone": {
              "type": "string",
              "example": "+1(99)999-99-99"
            },
            "fax": {
              "type": "string",
              "example": "+1(99)999-99-99"
            },
            "cellular": {
              "type": "string",
              "example": "+1(99)999-99-99"
            },
            "zip_code": {
              "type": "string"
            },
            "position": {
              "type": "string"
            },
            "resume": {
              "type": "string"
            },
            "birthday": {
              "type": "string"
            },
            "bookmark_start_cases": {
              "type": "string"
            },
            "time_zone": {
              "type": "string"
            },
            "default_lang": {
              "type": "string",
              "default": "en_US"
            },
            "created_at": {
              "$ref": "#/definitions/dateTime"
            },
            "updated_at": {
              "$ref": "#/definitions/dateTime"
            },
            "clients": {
              "type":"array",
              "items":{
                "type":"integer"
              }
            }
          }
        }
      }
    },
    "dateTime": {
      "type": "object",
      "required": [
        "date"
      ],
      "properties": {
        "date": {
          "type": "string",
          "example": "2016-08-23 18:11:05.000000"
        }
      }
    },
    "Pagination": {
      "type": "object",
      "required": [
        "total",
        "count",
        "per_page",
        "current_page",
        "total_pages",
        "links"
      ],
      "properties": {
        "total": {
          "type": "integer",
          "example": 125
        },
        "count": {
          "type": "integer",
          "example": 25
        },
        "per_page": {
          "type": "integer",
          "example": 25
        },
        "current_page": {
          "type": "integer",
          "example": 2
        },
        "total_pages": {
          "type": "integer",
          "example": 30
        },
        "links": {
          "type": "object",
          "properties": {
            "next": {
              "type": "string",
              "example": "http://localhost/api/v1/groups?page=3"
            },
            "previous": {
              "type": "string",
              "example": "http://localhost/api/v1/groups?page=1"
            }
          }
        }
      }
    },
    "MetaLog": {
      "type": "object",
      "required":[
        "import_log"
      ],
      "properties": {
        "import_log": {
          "type": "string"
        }
      }
    },
    "Meta": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "errorArray": {
      "type": "object",
      "required": [
        "errors"
      ],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}